Problem Statement:
The problem being addressed in this project is the management and manipulation of data. The primary tasks include loading information from a CSV file, displaying the data, finding a specific data, and removing data. The objective is to create a program that efficiently handles these tasks while ensuring data integrity and usability.

Approach:
In tackling this problem, the approach involves understanding the data structures suitable for storing and managing information efficiently. In this provided code, a linked list data structure is utilized to store and manipulate data objects. Linked lists are chosen for their dynamic memory allocation and ease of insertion and deletion. The code also incorporates file parsing to load data from a CSV file.

Understanding data structures is crucial because it enables developers to choose the most appropriate structure based on the requirements and constraints of the problem. It also impacts the efficiency and performance of the program. By analyzing the runtime complexities and characteristics of different data structures (as described in the provided documentation), developers can make informed decisions about which structure best fits the problem at hand.

Overcoming Roadblocks:
During the development process, I encountered roadblocks such as optimizing performance, handling edge cases, or debugging errors. One approach to overcoming these roadblocks was utilizing iterative development and testing. By breaking down the problem into smaller, manageable tasks, I was able to focus on one aspect at a time, gradually refining the solution and addressing any issues encountered along the way. Additionally, leveraging resources such as documentation, forums, and peers provided valuable insights and assistance in overcoming challenges.

Expanding Approach to Designing Software:
Working on this project expands the approach to designing software by emphasizing the importance of modularization, encapsulation, and abstraction. Breaking down the problem into smaller components (e.g., manipulation, file parsing) allows for more manageable development and maintenance. Furthermore, understanding the characteristics and trade-offs of different data structures enhances the ability to design scalable and efficient solutions tailored to specific requirements.

Evolution in Writing Maintainable, Readable, and Adaptable Programs:
Through this project, there is a focus on writing code that is maintainable, readable, and adaptable. This involves following best practices such as meaningful variable names, clear documentation, and modular design. Additionally, considering future scalability and potential changes in requirements can guide decisions in designing flexible and extensible code. By adhering to coding standards and principles, developers can create programs that are easier to understand, modify, and maintain over time.
